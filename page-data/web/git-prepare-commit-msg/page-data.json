{"componentChunkName":"component---src-templates-blog-post-js","path":"/web/git-prepare-commit-msg/","result":{"data":{"site":{"siteMetadata":{"title":"Archived by Sujin","author":"sujin-park","siteUrl":"https://sujin-park.github.io","comment":{"disqusShortName":"","utterances":"sujin-park/sujin-park.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"fbf69a66-692f-5a44-9f4a-17861a706dbe","excerpt":"Git Hooks 란 Git은 특정 이벤트가 발생했을 때 특정 스크립트를 실행할 수 있도록 Hook 이라는 기능을 지원한다. 프로젝트에 커밋을 하거나 푸시하기 전에 린트 또는 테스트를 실행할 수 있고, commit message 작성에 도움을 주는 hook 또한 있다.  Hooks 는 기본적으로 프로젝트의  에 위치한다.  위 예제는 shell script 와 Perl script 로 작성되어 있지만, 실행할 수 있다면 Ruby 또는 Python…","html":"<h2 id=\"git-hooks-란\" style=\"position:relative;\"><a href=\"#git-hooks-%EB%9E%80\" aria-label=\"git hooks 란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Git Hooks 란</h2>\n<p>Git은 특정 이벤트가 발생했을 때 특정 스크립트를 실행할 수 있도록 Hook 이라는 기능을 지원한다. 프로젝트에 커밋을 하거나 푸시하기 전에 린트 또는 테스트를 실행할 수 있고, commit message 작성에 도움을 주는 hook 또한 있다. </p>\n<br>\n<p>Hooks 는 기본적으로 프로젝트의 <code class=\"language-text\">.git/hooks</code> 에 위치한다. </p>\n<img width=\"658\" alt=\"스크린샷 2021-12-05 오후 8 55 39\" src=\"https://user-images.githubusercontent.com/29244798/146679364-308e4534-9dfd-4850-b9f0-59740e8dd0ec.png\">\n<br>\n<p>위 예제는 shell script 와 Perl script 로 작성되어 있지만, 실행할 수 있다면 Ruby 또는 Python 과 같이 익숙한 언어로 작성할 수도 있다. 위 예제에서 <code class=\"language-text\">.sample</code> 확장자만 제거하여도 바로 hook을 사용할 수 있다.</p>\n<br>\n<p>sample 파일은 그대로 유지하고 새로 생성하고 싶다면 아래와 같이 touch 명령어를 이용하여 파일을 생성할 수 있다. 생성만 하면 되는 것은 아니고 <code class=\"language-text\">실행할 수 있는 권한</code>을 줘야 한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> GIT_REPOSITORY/.git/hooks/pre-commit\n$ <span class=\"token function\">chmod</span> +x GIT_REPOSITORY/.git/hooks/prepare-commit-msg</code></pre></div>\n<br>\n<h2 id=\"hooks-종류\" style=\"position:relative;\"><a href=\"#hooks-%EC%A2%85%EB%A5%98\" aria-label=\"hooks 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooks 종류</h2>\n<h3 id=\"pre-commit\" style=\"position:relative;\"><a href=\"#pre-commit\" aria-label=\"pre commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pre-commit</h3>\n<p>커밋할 때 가장 먼저 호출되는 Hook 으로 커밋 메시지를 작성하기 전에 호출된다. pre-commit hook 에서는 린트를 실행하여 코드 스타일을 검사하거나, 라인 끝의 공백 문자를 검사하거나 테스트를 한다.</p>\n<p>아래 명령어를 실행하면 commit 시 pre-commit hook 을 <code class=\"language-text\">생략</code>할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> commit --no-verify</code></pre></div>\n<h3 id=\"prepare-commit-msg\" style=\"position:relative;\"><a href=\"#prepare-commit-msg\" aria-label=\"prepare commit msg permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>prepare-commit-msg</h3>\n<p>커밋 메시지를 수정하기 전에 먼저 prefix 또는 suffix 를 붙이는 것과 같이 hook 을 통해 커밋 메시지를 손보고 싶을 때 사용한다.</p>\n<h3 id=\"commit-msg\" style=\"position:relative;\"><a href=\"#commit-msg\" aria-label=\"commit msg permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>commit-msg</h3>\n<p>이 hook 은 커밋 메시지가 들어 있는 임시 파일의 경로를 argument 로 받고 스크립트가 0이 아닌 값을 반환하면 커밋이 되지 않는다. 이 hook에서는 최종적으로 커밋이 완료되기 전에 프로젝트 상태나 커밋 메시지를 검증한다.</p>\n<h3 id=\"post-commit\" style=\"position:relative;\"><a href=\"#post-commit\" aria-label=\"post commit permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>post-commit</h3>\n<p>커밋이 완료되면 post-commit hook이 실행되므로 post-commit 은 커밋한 것을 동료나 다른 프로그램에 노티를 줄 때 사용할 수 있다.</p>\n<h3 id=\"pre-rebase\" style=\"position:relative;\"><a href=\"#pre-rebase\" aria-label=\"pre rebase permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>pre-rebase</h3>\n<p>rebase 하기 전에 실행되는 훅으로 이미 push 한 커밋을 rebase 하지 못하게 할 수 있는 hook 으로 사용한다. Git 이 기본적으로 제공해주는 pre-rebase.sample 코드에 예제 또한 있다.</p>\n<h3 id=\"post-rewrite\" style=\"position:relative;\"><a href=\"#post-rewrite\" aria-label=\"post rewrite permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>post-rewrite</h3>\n<p>커밋을 변경하는 명령을 실행했을 때 실행되는 훅으로 용량이 크거나 Git 이 관리하지 않는 파일을 옮길 때, 문서를 자동으로 생성할 때 사용한다.</p>\n<h3 id=\"post-merge\" style=\"position:relative;\"><a href=\"#post-merge\" aria-label=\"post merge permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>post-merge</h3>\n<p>Merge 가 끝나고 나서 실행되는 hook이다.</p>\n<br>\n<h2 id=\"hooks-사용-예제\" style=\"position:relative;\"><a href=\"#hooks-%EC%82%AC%EC%9A%A9-%EC%98%88%EC%A0%9C\" aria-label=\"hooks 사용 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooks 사용 예제</h2>\n<p>동료와 협업할 때 기본적으로 Git commit message 에 대해 포맷을 논의하고 동일하게 작성하려고 노력을 한다. 이 노력을 각자 할 수도 있겠지만, 이번에는 Git hooks 중 prepare-commit-msg 를 사용하여 Git 이 어느정도 자동으로 해줄 수 있는 방법을 소개해보려고 한다.</p>\n<br>\n<p><strong>가이드</strong></p>\n<ul>\n<li>하나의 저장소 내에 여러 개의 프로젝트가 존재하여 프로젝트의 이름을 prefix 로 작성</li>\n<li>feature, refactoring, fix 등 해당 커밋의 목적이 무엇인지 작성</li>\n<li>마지막으로 작성된 커밋 메시지</li>\n</ul>\n<p>위 요구사항에 부합하는 prepare-commit-msg 를 아래와 같이 작성해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token constant\">COMMIT_MSG_FILE</span><span class=\"token operator\">=</span>$1\n\n<span class=\"token constant\">BRANCH_NAME</span><span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">git rev-parse --abbrev-ref HEAD</span><span class=\"token template-punctuation string\">`</span></span>\n<span class=\"token constant\">PROJECT_NAME</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>\n<span class=\"token constant\">PREFIX</span><span class=\"token operator\">=</span><span class=\"token string\">''</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token string\">\"${BRANCH_NAME}\"</span> <span class=\"token operator\">==</span> <span class=\"token operator\">*</span><span class=\"token string\">\"/\"</span><span class=\"token operator\">*</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>then\n    <span class=\"token constant\">PROJECT_NAME</span><span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">echo </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BRANCH_NAME</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> | cut -d '/' -f1</span><span class=\"token template-punctuation string\">`</span></span>\n    <span class=\"token constant\">PREFIX</span><span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">echo </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">BRANCH_NAME</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> | cut -d '/' -f2 | cut -d '-' -f1</span><span class=\"token template-punctuation string\">`</span></span>\nfi\n\n<span class=\"token constant\">FIRST_LINE</span><span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">head -n1 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">COMMIT_MSG_FILE</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> $<span class=\"token punctuation\">{</span><span class=\"token constant\">PROJECT_NAME</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> then\n    exit\nfi\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> <span class=\"token operator\">-</span>z <span class=\"token string\">\"$FIRST_LINE\"</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> then\n    sed <span class=\"token operator\">-</span>i <span class=\"token string\">\".bak\"</span> <span class=\"token string\">\"1s/^/[$PROJECT_NAME] $PREFIX /\"</span> $<span class=\"token punctuation\">{</span><span class=\"token constant\">COMMIT_MSG_FILE</span><span class=\"token punctuation\">}</span>\nfi</code></pre></div>\n<p>가이드에 부합하지 않는 브랜치를 복잡한 정규식을 활용하여 예외케이스를 작성해주면 좋을 것 같았지만 우선 1차적으로 구현을 위해 위와 같이 작성하였다.</p>\n<p>그럼 이제 실제로 커밋을 생성한다고 가정해보려고 한다.</p>\n<p>아래는 위 가이드를 만족하는 테스트 브랜치명이다. 브랜치명을 <code class=\"language-text\">project-name/feature-XXX</code> 라고 생성하고  </p>\n<p><code class=\"language-text\">git commit</code> 명령어를 실행하면 아래와 같이 [project] feature 라는 접두사가 붙는다.</p>\n<img width=\"582\" alt=\"스크린샷 2021-12-19 오후 11 39 39\" src=\"https://user-images.githubusercontent.com/29244798/146679378-38f64534-f0a0-4794-9244-a67eb8615551.png\">\n<br>\n가이드를 만족하지 않는 브랜치명을 작성하게 되면 아래와 같이 공백인 것을 볼 수 있다.\n<img width=\"579\" alt=\"스크린샷 2021-12-19 오후 11 40 01\" src=\"https://user-images.githubusercontent.com/29244798/146679398-b61a3b5a-404d-4f7d-800a-8207815354d1.png\">\n<br>\n<br>\n<br>\n<p><strong>참고</strong></p>\n<p><a href=\"https://mincong.io/2019/07/23/prepare-commit-message-using-git-hook/\">https://mincong.io/2019/07/23/prepare-commit-message-using-git-hook/</a></p>\n<p><a href=\"https://ohgyun.com/639\">https://ohgyun.com/639</a></p>\n<p><a href=\"https://techblog.woowahan.com/2530/\">https://techblog.woowahan.com/2530/</a></p>\n<p><a href=\"https://git-scm.com/docs/githooks\">https://git-scm.com/docs/githooks</a></p>","frontmatter":{"title":"[Git] Git hooks를 이용하여 commit message 에 특정 문자 넣기","date":"December 19, 2021"}}},"pageContext":{"slug":"/web/git-prepare-commit-msg/","previous":{"fields":{"slug":"/web/git-tag-release-drafter/"},"frontmatter":{"title":"[Git] Git tag, Release Drafter로 release note 작성하기","category":"web","draft":false}},"next":{"fields":{"slug":"/book-club/clean-code-day1/"},"frontmatter":{"title":"CleanCode(클린코드) - 들어가면서","category":"book-club","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}