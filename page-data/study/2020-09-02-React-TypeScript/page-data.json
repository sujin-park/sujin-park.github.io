{"componentChunkName":"component---src-templates-blog-post-js","path":"/study/2020-09-02-React-TypeScript/","result":{"data":{"site":{"siteMetadata":{"title":"Archived by Sujin","author":"sujin-park","siteUrl":"https://sujin-park.github.io","comment":{"disqusShortName":"","utterances":"sujin-park/sujin-park.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a4d84bd4-4507-53d7-bb6c-ce2776b25a55","excerpt":"TypeScript로 Type 체크만 하는 정도로 써보고 깊게 사용해보지 못했는데,\nTypeScript와 React…","html":"<p>TypeScript로 Type 체크만 하는 정도로 써보고 깊게 사용해보지 못했는데,\nTypeScript와 React 기반으로 컴포넌트, 아키텍쳐 설계를 함께 학습할 수 있는 기회가 생겼다.\n항상 혼자보는 목적으로 기록을 해왔는데 이번엔 블로그에도 올려보자는 생각으로 좀 더 열심히 기록을 하기로 했다.</p>\n<h3 id=\"여러분들의-고민\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC%EB%B6%84%EB%93%A4%EC%9D%98-%EA%B3%A0%EB%AF%BC\" aria-label=\"여러분들의 고민 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러분들의 고민</h3>\n<ul>\n<li>나는 잘 하고 있나 ?</li>\n<li>네트워킹 희망</li>\n<li>코드 품질</li>\n<li>아키텍쳐</li>\n<li>\n<p>적정기술</p>\n<ul>\n<li>프로젝트에 맞는 적정 기술을 선택하였는지 아닌지, 정답이 있는 문제인지 고민.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"그래서-강의에서-전달하고-싶은-것은-무엇인가\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EA%B0%95%EC%9D%98%EC%97%90%EC%84%9C-%EC%A0%84%EB%8B%AC%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EA%B2%83%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"그래서 강의에서 전달하고 싶은 것은 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서, 강의에서 전달하고 싶은 것은 무엇인가?</h3>\n<ul>\n<li>\n<p>도구</p>\n<ul>\n<li>도구의 사용법</li>\n<li>TypeScript, React, Etc…</li>\n<li>상태관리자, 비동기 워크플로우, 테스팅…</li>\n</ul>\n</li>\n<li>\n<p>목표, 바램, 기대</p>\n<ul>\n<li>상태</li>\n<li>\n<p>환경</p>\n<ul>\n<li>다양한 실행환경을 어떻게 대응 할 것인가</li>\n</ul>\n</li>\n<li>제품</li>\n<li>목표</li>\n<li>코드</li>\n<li>상대적</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"앞으로-사용할-도구\" style=\"position:relative;\"><a href=\"#%EC%95%9E%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%A0-%EB%8F%84%EA%B5%AC\" aria-label=\"앞으로 사용할 도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>앞으로 사용할 도구</h3>\n<ul>\n<li>\n<p><a href=\"https://www.typescriptlang.org/play\">TypeScript playground</a></p>\n<ul>\n<li>예제는 <a href=\"http://codesandbox.io\">CodeSandbox.io</a> 에서 할 예정</li>\n</ul>\n</li>\n<li><a href=\"https://reactjs.org/\">React 공식 문서</a></li>\n<li><a href=\"https://redux.js.org/\">Redux</a> &#x26; <a href=\"https://mobx.js.org/README.html\">MobX</a> 상태관리</li>\n<li><a href=\"https://redux-saga.js.org/\">Redux-saga</a> 와 generator, async function 도 함께 다루게 될 예정</li>\n<li>\n<p><a href=\"https://blueprintjs.com/\">Blueprint UI Framework</a></p>\n<ul>\n<li>TypeScript 기반의 UI Framework 로 TypeScript Class, Generic 등 기능을 많이 활용하면서 어떻게 React 컴포넌트화를 잘 할 수 있는지에 대해 학습하기 좋은 Framework 이다.</li>\n</ul>\n</li>\n<li><a href=\"https://testing-library.com/\">Testing Library</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">요즘 오픈소스 컨트리뷰톤을 하면서 컨트리뷰션에 관심이 많은데 Blueprint UI Framework 에 기여해보고싶다!</code></pre></div>\n<h3 id=\"타입스크립트-intro\" style=\"position:relative;\"><a href=\"#%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-intro\" aria-label=\"타입스크립트 intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입스크립트 Intro.</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 추론을 통해 foo 를 number 로 인지한다.</span>\n\nfoo <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// foo 가 number type 으로 되었기 때문에 type 이 다르다고 오류 발생한다.</span>\n\n<span class=\"token comment\">// 가변인자를 처리하는 함수구나라는걸 알려줄 수 있다. (...args)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Docs 에 Basic Type 을 읽어보면 좋을 것 같다.</li>\n<li>암묵적인 것보다는 명시적인 것이 보통 좋다고 생각하고, 스펙을 만드는 개발자들도 비슷한 생각을 한다.</li>\n<li>난해한 코드보다는 명시적이고 읽기 쉬운 코드를 (코드가 길어진다하더라도) 더 선호한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">type Age <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span> <span class=\"token comment\">// type alias.</span>\n\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> Age <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token literal-property property\">weight</span><span class=\"token operator\">:</span> number <span class=\"token operator\">=</span> <span class=\"token number\">70</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>type alias 는 transpiling 되면 다 사라진다. ( javascript 에서는 안보임 )</li>\n<li>\n<p><strong>type alias 는 컴파일 타임에만 작동되는 문법 요소이다.</strong></p>\n<ul>\n<li>\n<p>compile 에만 작동되는 요소</p>\n<ul>\n<li>Interface, Generic</li>\n</ul>\n</li>\n<li>\n<p>runtime 에만 작동되는 요소</p>\n<ul>\n<li>javascript transpiling 되는 것들</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// nesting</span>\n\ntype Age <span class=\"token operator\">=</span> number<span class=\"token punctuation\">;</span>\n\ntype Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> Age<span class=\"token punctuation\">;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">foo</span><span class=\"token operator\">:</span> Foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// type 과 interface 둘 다 비슷한 형태로 보이지만 이후 강의에서 다룰 예정이다.</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Bar</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> Age<span class=\"token punctuation\">;</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token literal-property property\">bar</span><span class=\"token operator\">:</span> Bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n\t<span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'kim'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"react-intro\" style=\"position:relative;\"><a href=\"#react-intro\" aria-label=\"react intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Intro.</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">yarn create<span class=\"token operator\">-</span>react<span class=\"token operator\">-</span>app my<span class=\"token operator\">-</span>app <span class=\"token operator\">--</span>template typescript</code></pre></div>\n<p>tsconfig.json</p>\n<ul>\n<li>typescript compiler option 설정을 해줄 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// React package 를 트랜스파일링 된 후에 사용을 하기 때문에 꼭 필요하다.</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>header<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello Tech</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token operator\">**</span>Babel trasnpiling<span class=\"token operator\">**</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"h1\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"header\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Hello Tech\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// transpiling 됐을 때, 2번째 인자로 객체를 통해 값을 주기 때문에 객체로 넘어온다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span> props<span class=\"token punctuation\">.</span>title <span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span> <span class=\"token comment\">// transpiling 을 했을 때 props 가 넘어온 변수라는걸 체크해줄 수 없기 때문에 {} 로 구분해준다.</span>\n\t<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"redux\" style=\"position:relative;\"><a href=\"#redux\" aria-label=\"redux permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux</h3>\n<ul>\n<li>Flux 아키텍쳐 기반으로 만들어진 상태관리 라이브러리</li>\n<li>React 자체가 전역 컴포넌트의 상태를 immutable 한 형태를 지향하기 때문에 Flux 아키텍쳐 기반이다.</li>\n</ul>\n<h3 id=\"mobx\" style=\"position:relative;\"><a href=\"#mobx\" aria-label=\"mobx permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MobX</h3>\n<ul>\n<li>상태를 바라보는 관점도 다르다.</li>\n<li>기능도 많고, 다양한 유형의 Practice 가 많기 때문에 어떤 형태가 더 좋은건지 혼란을 줄 수 있다.</li>\n<li>유연성이 가진 장점도 있고, 단점도 있다.</li>\n<li>MST → MobX State Tree.</li>\n</ul>\n<h3 id=\"q--a-중-좋았던-내용\" style=\"position:relative;\"><a href=\"#q--a-%EC%A4%91-%EC%A2%8B%EC%95%98%EB%8D%98-%EB%82%B4%EC%9A%A9\" aria-label=\"q  a 중 좋았던 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Q &#x26; A 중 좋았던 내용</h3>\n<ul>\n<li>\n<p>공부해야 할 것들은 많고, 자신이 아직 부족하다고 느끼면서 공부를 하는데 좋은 시니어가 되기 위해 주니어 때 놓치지 말아야 할 부분이 무엇이 있을지에 대해 Q &#x26; A 에 올렸었다. 강사님께서 너무 좋은 답변을 해주셔서 메모해 두었다.</p>\n<ul>\n<li>주니어에게는 압도적으로 많은 시간이 있기 때문에 충분한 시간과 여유를 가지고 공부를 할 수 있으면 좋겠다고 해주셨다. <strong>공부에 방해가 되는 것은 초조한 생각</strong>이고 <strong>개발은 마라톤이기 때문에 천천히 충분한 시간을 가지고</strong> 공부를 하면 좋을 것 같다고 해주셨다.</li>\n</ul>\n</li>\n</ul>\n<p>첫 시간이어서 광범위한 부분을 짧게 설명해주셔서 전체적으로 알고 있던 부분도 한번 더 되새기고, 몰랐던 부분도 알 수 있는 시간이었다. 2시간 반인데 쉬는시간에도 질의응답을 해주셔서 정말 알찬 시간이었다. 2시간 반이 이렇게 짧은 시간이었다니..\n그나저나 다시 React TypeScript 강의도 듣게 되었는데 Gatsby로 블로그를 바꿔야겠다. 지금 가독성이 현저히 떨어진다..</p>","frontmatter":{"title":"[우아한테크러닝] React & TypeScript 3기 - 1회차","date":"September 02, 2020"}}},"pageContext":{"slug":"/study/2020-09-02-React-TypeScript/","previous":{"fields":{"slug":"/javascript/2020-08-16-Number-parseInt/"},"frontmatter":{"title":"Number와 parseInt 의 차이","category":"javascript","draft":false}},"next":{"fields":{"slug":"/study/2020-09-12-React-TypeScript3/"},"frontmatter":{"title":"[우아한테크러닝] React & TypeScript 3기 - 3회차","category":"study","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}