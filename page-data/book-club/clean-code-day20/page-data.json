{"componentChunkName":"component---src-templates-blog-post-js","path":"/book-club/clean-code-day20/","result":{"data":{"site":{"siteMetadata":{"title":"Archived by Sujin","author":"sujin-park","siteUrl":"https://sujin-park.github.io","comment":{"disqusShortName":"","utterances":"sujin-park/sujin-park.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8afa6a6d-9b35-5a63-a6d6-c37483789e5a","excerpt":"🔖 오늘 읽은 범위 : 1…","html":"<p>🔖 오늘 읽은 범위 : 10장 - 클래스</p>\n<hr>\n<br>\n<h2 id=\"-책에서-기억하고-싶은-내용을-써보세요\" style=\"position:relative;\"><a href=\"#-%EC%B1%85%EC%97%90%EC%84%9C-%EA%B8%B0%EC%96%B5%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EB%82%B4%EC%9A%A9%EC%9D%84-%EC%8D%A8%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\" 책에서 기억하고 싶은 내용을 써보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😃 <strong>책에서 기억하고 싶은 내용을 써보세요.</strong></h2>\n<h3 id=\"클래스-체계\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B2%B4%EA%B3%84\" aria-label=\"클래스 체계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 체계</h3>\n<ul>\n<li>\n<p>클래스를 정의하는 표준 자바 관례에 따르면, 추상화 단계가 순차적으로 내려가 아래 순서로 나온다. 프로그램은 신문 기사처럼 읽힌다.</p>\n<ol>\n<li>\n<p>변수 목록</p>\n<ol>\n<li>정적 공개 상수가 있다면 정적 공개 상수</li>\n<li>정적 비공개 변수</li>\n<li>비공개 인스턴스 변수</li>\n</ol>\n</li>\n<li>공개 함수</li>\n<li>비공개 함수는 자신을 호출하는 공개 함수 직후에</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"클래스는-작아야-한다\" style=\"position:relative;\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EC%9E%91%EC%95%84%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"클래스는 작아야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스는 작아야 한다</h3>\n<p>클래스를 만들 때 첫 번째 규칙은 크기다. 그렇다면 얼마나 작아야 하는가? <code class=\"language-text\">클래스가 맡은 책임을 센다.</code></p>\n<ul>\n<li>클래스 이름은 해당 클래스 책임을 기술해야 한다. <strong>실제로 작명은 클래스 크기를 줄이는 첫 번째 관문이다.</strong></li>\n<li>클래스명은 25단어 내외로 가능해야 한다.</li>\n</ul>\n<p><strong>단일 책임 원칙 (SRP)</strong></p>\n<ul>\n<li>클래스나 모듈을 변경할 이유가 하나, 단 하나뿐이어야 한다.</li>\n<li>SRP 는 책임이라는 개념을 정의하며 적절한 클래스 크기를 제시한다.</li>\n<li>클래스는 책임, 즉 변경할 이유가 하나여야 한다는 의미다.</li>\n<li>큰 클래스 몇 개가 아니라 작은 클래스 여럿으로 이뤄진 시스템이 더 바람직하다. 작은 클래스는 각자 맡은 책임이 하나며, 변경할 이유가 하나며, 다른 작은 클래스와 협력해 시스템에 필요한 동작을 수행한다.</li>\n</ul>\n<p><code class=\"language-text\">책임</code> , 즉 변경할 이유를 파악하려 애쓰다 보면 코드를 추상화하기도 쉬워진다.</p>\n<p><strong>응집도</strong></p>\n<ul>\n<li>클래스는 인스턴스 변수 수가 작아야 한다. 각 클래스 메서드는 클래스 인스턴스 변수를 하나 이상 사용해야 한다.</li>\n<li>일반적으로 메서드가 변수를 많이 사용할수록 메서드와 클래스는 응집도는 더 높다.</li>\n<li>응집도가 높아질수록 변수와 메서드를 적절히 분리해 새로운 클래스 두세 개로 쪼갠다.</li>\n</ul>\n<h3 id=\"변경하기-쉬운-클래스\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0-%EC%89%AC%EC%9A%B4-%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"변경하기 쉬운 클래스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변경하기 쉬운 클래스</h3>\n<ul>\n<li>새 기능을 수정하거나 기존 기능을 변경할 때 건드릴 코드가 최소인 시스템 구조가 바람직하다.</li>\n<li>이상적인 시스템이라면 새 기능을 추가할 때 시스템을 확장할 뿐 기존 코드를 변경하지는 않는다.</li>\n<li>OCP 란 클래스는 확장에 개방적이고 수정에 폐쇠적이어야 한다는 원칙이다.</li>\n</ul>\n<p><strong>변경으로부터 격리</strong></p>\n<ul>\n<li>인터페이스와 추상 클래스를 사용해 구현이 미치는 영향을 격리한다.</li>\n<li>테스트가 가능할 정도로 시스템의 결합도를 낮추면 유연성과 재사용성도 더욱 높아진다.</li>\n<li>결합도가 낮다는 소리는 각 시스템 요소가 다른 요소로부터 그리고 변경으로부터 잘 격리되어 있다는 의미다.</li>\n<li>\n<p>결합도를 최소로 줄이면 자연스럽게 또 다른 클래스 설계 원칙 <code class=\"language-text\">DIP</code> 를 따르는 클래스가 나온다.</p>\n<ul>\n<li>본질적으로 DIP는 클래스가 상세한 구현이 아니라 추상화에 의존해야 한다는 원칙이다.</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"CleanCode(클린코드) - 10장. 클래스","date":"February 10, 2022"}}},"pageContext":{"slug":"/book-club/clean-code-day20/","previous":{"fields":{"slug":"/book-club/clean-code-day17/"},"frontmatter":{"title":"CleanCode(클린코드) - 9장. 단위테스트","category":"book-club","draft":false}},"next":null}},"staticQueryHashes":["3128451518","521680639"]}