{"componentChunkName":"component---src-templates-blog-post-js","path":"/book-club/clean-code-day17/","result":{"data":{"site":{"siteMetadata":{"title":"Archived by Sujin","author":"sujin-park","siteUrl":"https://sujin-park.github.io","comment":{"disqusShortName":"","utterances":"sujin-park/sujin-park.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"1afdfb02-2f18-5447-8773-6f291af47fbe","excerpt":"🔖 오늘 읽은 범위 : 9장 - 단위테스트 😃 책에서 기억하고 싶은 내용을 써보세요. TDD…","html":"<p>🔖 오늘 읽은 범위 : 9장 - 단위테스트</p>\n<hr>\n<br>\n<h2 id=\"-책에서-기억하고-싶은-내용을-써보세요\" style=\"position:relative;\"><a href=\"#-%EC%B1%85%EC%97%90%EC%84%9C-%EA%B8%B0%EC%96%B5%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EB%82%B4%EC%9A%A9%EC%9D%84-%EC%8D%A8%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\" 책에서 기억하고 싶은 내용을 써보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😃 <strong>책에서 기억하고 싶은 내용을 써보세요.</strong></h2>\n<h3 id=\"tdd-법칙-세-가지\" style=\"position:relative;\"><a href=\"#tdd-%EB%B2%95%EC%B9%99-%EC%84%B8-%EA%B0%80%EC%A7%80\" aria-label=\"tdd 법칙 세 가지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>TDD 법칙 세 가지</strong></h3>\n<ol>\n<li>실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다.</li>\n<li>컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다.</li>\n<li>현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다.</li>\n</ol>\n<p>위 세 가지 규칙을 따르면 실제 코드를 사실상 전부 테스트하는 테스트 케이스가 나온다. 하지만 실제 코드와 맞먹을 정도로 방대한 테스트 코드는 심각한 관리 문제를 유발하기도 한다.</p>\n<h3 id=\"깨끗한-테스트-코드-유지하기\" style=\"position:relative;\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%BD%94%EB%93%9C-%EC%9C%A0%EC%A7%80%ED%95%98%EA%B8%B0\" aria-label=\"깨끗한 테스트 코드 유지하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>깨끗한 테스트 코드 유지하기</strong></h3>\n<ul>\n<li>테스트 코드는 실제 코드 못지 않게 중요하다. 테스트 코드는 사고와 설계와 주의가 필요하다. 실제 코드 못지 않게 깨끗하게 짜야 한다.</li>\n<li>\n<p>테스트는 유연성, 유지보수성, 재사용성을 제공한다.</p>\n<ul>\n<li>코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 <code class=\"language-text\">단위테스트</code>다.</li>\n<li>테스트 코드가 지저분하면 코드를 변경하는 능력이 떨어지며 코드 구조를 개선하는 능력도 떨어진다.</li>\n<li>테스트 코드가 지저분할수록 실제 코드도 지저분해진다. 결국 테스트 코드를 잃어버리고 실제 코드도 망가진다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"깨끗한-코드\" style=\"position:relative;\"><a href=\"#%EA%B9%A8%EB%81%97%ED%95%9C-%EC%BD%94%EB%93%9C\" aria-label=\"깨끗한 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>깨끗한 코드</strong></h3>\n<ul>\n<li>깨끗한 테스트 코드를 만들려면 <strong>가독성</strong>이 필요하다.</li>\n<li>\n<p>BUILD-OPERATE-CHECK 패턴이 테스트 구조에 적합하다. 각 테스트는 명확하게 세 부분으로 나눠진다.</p>\n<ul>\n<li>테스트 자료를 만든다.</li>\n<li>테스트 자료를 조작한다.</li>\n<li>조작한 결과가 올바른지 확인한다.</li>\n</ul>\n</li>\n</ul>\n<p><strong>이중 표준</strong></p>\n<ul>\n<li>실제 환경에서는 절대로 안 되지만 테스트 환경에서는 전혀 문제없는 방식이 있다. 대개 메모리나 CPU 효율과 관련 있는 경우다. 코드의 깨끗함과는 철저히 무관하다</li>\n<li><strong>컴퓨터 자원과 메모리가 제한적일 가능성이 높지만, 테스트 환경은 자원이 제한적일 가능성이 낮다.</strong></li>\n</ul>\n<h3 id=\"테스트-당-assert-하나\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8B%B9-assert-%ED%95%98%EB%82%98\" aria-label=\"테스트 당 assert 하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 당 assert 하나</h3>\n<ul>\n<li>assert 문이 단 하나인 함수는 결론이 하나라서 코드를 이해하기 쉽고 빠르다.</li>\n<li>given-when-then 이라는 관례를 사용하면 테스트 코드를 읽기가 쉬워진다.</li>\n<li>\n<p>테스트를 분리하면 중복되는 코드가 많아지는데, 이 때는 <code class=\"language-text\">TEMPLATE METHOD</code> 패턴을 사용하면 중복을 제거할 수 있다.</p>\n<ol>\n<li>given/when 을 부모 클래스에 두고 then 을 자식 클래스에 둔다.</li>\n<li>given/when 을 @Before 함수에 넣고, @Test 함수에 then 을 넣어도 된다.</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"테스트-당-개념-하나\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EB%8B%B9-%EA%B0%9C%EB%85%90-%ED%95%98%EB%82%98\" aria-label=\"테스트 당 개념 하나 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>테스트 당 개념 하나</strong></h3>\n<ul>\n<li>테스트 함수마다 한 개념만 테스트하라</li>\n<li>개념 당 assert 문 수를 최소로 줄여라</li>\n</ul>\n<h3 id=\"first\" style=\"position:relative;\"><a href=\"#first\" aria-label=\"first permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>F.I.R.S.T</strong></h3>\n<p>깨끗한 테스트는 다음 다섯 가지 규칙을 따르는데, 각 규칙에서 첫 글자를 따오면 FIRST 가 된다.</p>\n<ol>\n<li>Fast : 테스트는 빨리 돌아야 한다. 테스트가 느리면 자주 돌릴 엄두를 못 낸다. 자주 돌리지 않으면 초반에 문제를 찾아내 고치지 못한다.</li>\n<li>Independent : 각 테스트는 서로 의존하면 안 된다. 각 테스트는 독립적으로 그리고 어떤 순서로 실행해도 괜찮아야 한다.</li>\n<li>Repeatable : 테스트는 어떤 환경에서도 반복 가능해야 한다.</li>\n<li>Self-Validating : 테스트는 bool 값으로 결과를 내야 한다. 성공 아니면 실패다.</li>\n<li>Timely : 테스트는 적시에 작성해야 한다. 단위 테스트는 테스트하려는 실제 코드를 구현하기 직전에 구현한다.</li>\n</ol>\n<h3 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h3>\n<p>테스트 코드는 지속적으로 깨끗하게 관리하자. 표현력을 높이고 간결하게 정리하자. 테스트 API 를 구현해 도메인 특화 언어를 만들자.</p>\n<br>\n<h2 id=\"-오늘-읽은-소감은-떠오르는-생각을-가볍게-적어보세요\" style=\"position:relative;\"><a href=\"#-%EC%98%A4%EB%8A%98-%EC%9D%BD%EC%9D%80-%EC%86%8C%EA%B0%90%EC%9D%80-%EB%96%A0%EC%98%A4%EB%A5%B4%EB%8A%94-%EC%83%9D%EA%B0%81%EC%9D%84-%EA%B0%80%EB%B3%8D%EA%B2%8C-%EC%A0%81%EC%96%B4%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\" 오늘 읽은 소감은 떠오르는 생각을 가볍게 적어보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 <strong>오늘 읽은 소감은? 떠오르는 생각을 가볍게 적어보세요</strong></h2>\n<ul>\n<li>테스트는 유연성, 유지보수성, 재사용성을 제공한다는 것을 명심하고 테스트 코드를 작성하는 것을 필수로 해야 한다.</li>\n<li>그렇지만 컴포넌트와 의존성이 강한 함수는 어떻게 테스트를 할 수 있을까? 시각적 요소를 자동화하기라는 주제로 강연이 있었는데 그걸 얼른 봐야겠다.</li>\n</ul>\n<br>\n<p>테스트 코드는 작성하다보면 깔끔하게 작성하기가 어려울 때가 많다. 테스트 당 개념 하나를 놓치고 생각대로 작성했기에 그렇게 작성할 수 밖에 없었던게 아닐까.</p>\n<p>오늘부터 다시 알고리즘을 풀면서 테스트 코드를 좀 더 깨끗하게 작성하는 방법을 익혀봐야겠다.</p>\n<p>FIRST 전략 중 가장 공감이 되는 부분은 Fast 이다. 이전에 오픈소스에 기여할 때, 특정 테스트는 오래 걸려서 테스트 돌릴 때 빼고 돌리는 형태로 작업을 했었다. 작업할 때 돌리지 못한 테스트는 Pull Request 시에 테스트 할 수 있었는데 이 부분을 작업하면서 같이 돌릴 수 있으면 좀 더 많은 범위를 테스트할 수 있지 않았을까 아쉬움이 남는다. (테스트 코드 경험이 많지 않아서 작성한 예시는 매번 돌리지않아도 되는 테스트였을 수 있다.)</p>\n<br>\n<h2 id=\"-궁금한-내용이-있거나-잘-이해되지-않는-내용이-있다면-적어보세요\" style=\"position:relative;\"><a href=\"#-%EA%B6%81%EA%B8%88%ED%95%9C-%EB%82%B4%EC%9A%A9%EC%9D%B4-%EC%9E%88%EA%B1%B0%EB%82%98-%EC%9E%98-%EC%9D%B4%ED%95%B4%EB%90%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EB%82%B4%EC%9A%A9%EC%9D%B4-%EC%9E%88%EB%8B%A4%EB%A9%B4-%EC%A0%81%EC%96%B4%EB%B3%B4%EC%84%B8%EC%9A%94\" aria-label=\" 궁금한 내용이 있거나 잘 이해되지 않는 내용이 있다면 적어보세요 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔎 <strong>궁금한 내용이 있거나, 잘 이해되지 않는 내용이 있다면 적어보세요.</strong></h2>\n<h3 id=\"템플릿-메소드-패턴\" style=\"position:relative;\"><a href=\"#%ED%85%9C%ED%94%8C%EB%A6%BF-%EB%A9%94%EC%86%8C%EB%93%9C-%ED%8C%A8%ED%84%B4\" aria-label=\"템플릿 메소드 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>템플릿 메소드 패턴</h3>\n<p>알고리즘의 구조를 메소드에 정의하고, 하위 클래스에서 알고리즘 구조의 변경없이 알고리즘을 재정의하는 패턴</p>\n<p>알고리즘이 단계별로 나누어지거나, 같은 역할을 하는 메소드이지만 여러곳에서 다른 형태로 사용이 필요한 경우 유용한 패턴이다.</p>\n<p>참고: <a href=\"https://yaboong.github.io/design-pattern/2018/09/27/template-method-pattern/\">https://yaboong.github.io/design-pattern/2018/09/27/template-method-pattern/</a></p>\n<h3 id=\"build-operate-check-패턴\" style=\"position:relative;\"><a href=\"#build-operate-check-%ED%8C%A8%ED%84%B4\" aria-label=\"build operate check 패턴 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BUILD-OPERATE-CHECK 패턴</h3>\n<p>Build - 테스트 시나리오를 준비하는 단계</p>\n<p>Operate - 메서드를 실행하는 단계</p>\n<p>Check - 실행된 메소드의 결과가 예상했던 것과 일치하는지 확인한다.</p>\n<p><a href=\"https://medium.com/swlh/usual-production-patterns-applied-to-integration-tests-50a941f0b04a\">https://medium.com/swlh/usual-production-patterns-applied-to-integration-tests-50a941f0b04a</a></p>\n<br>\n<h2 id=\"-소감-3줄-요약\" style=\"position:relative;\"><a href=\"#-%EC%86%8C%EA%B0%90-3%EC%A4%84-%EC%9A%94%EC%95%BD\" aria-label=\" 소감 3줄 요약 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔥 <strong>소감 3줄 요약</strong></h2>\n<ul>\n<li>깨끗한 테스트 코드를 만들려면 <strong><code class=\"language-text\">가독성</code></strong>이 필요하다.</li>\n<li>코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 바로 <code class=\"language-text\">**단위테스트**</code>다.</li>\n<li>TDD 법칙 3가지 명심하자.</li>\n<li>테스트 함수마다 한 개념만 테스트하라</li>\n<li>깨끗한 테스트는 F.I.R.S.T 전략을 따른다</li>\n<li>테스트 코드를 작성하는 것에만 집중하지말고, 지속적으로 깨끗하게 관리하자</li>\n</ul>","frontmatter":{"title":"CleanCode(클린코드) - 9장. 단위테스트","date":"February 07, 2022"}}},"pageContext":{"slug":"/book-club/clean-code-day17/","previous":{"fields":{"slug":"/book-club/clean-code-day15/"},"frontmatter":{"title":"CleanCode(클린코드) - 7장. 오류 처리","category":"book-club","draft":false}},"next":{"fields":{"slug":"/book-club/clean-code-day20/"},"frontmatter":{"title":"CleanCode(클린코드) - 10장. 클래스","category":"book-club","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}