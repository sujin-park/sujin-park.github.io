{"componentChunkName":"component---src-templates-blog-post-js","path":"/conference/2020-05-05-Kakao-meetup/","result":{"data":{"site":{"siteMetadata":{"title":"Archived by Sujin","author":"sujin-park","siteUrl":"https://sujin-park.github.io","comment":{"disqusShortName":"","utterances":"sujin-park/sujin-park.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"8c7717c7-d26b-541d-98b0-1a971c84efce","excerpt":"Kakao FE meetup 에 다녀오고 글을 정리해둔지는 꽤 되었는데 이제서야 포스팅을 하게 되었다.\n그 때 얻었던 인사이트를 지금까지 적용해본게 있는지 되돌아 보고자 재정리 + 포스팅을 하기로 결심했다. 얼른 생활적 거리두기도 끝나고 모든게 괜찮아져서 세미나를 다시 갈 수 있는 날이 오길. 글로 보는 것과 세미나에서 직접 듣고 질의응답에 참여하는건 정말 다른 것 같다. (글만으로도 충분하지만) 프렌즈타임 웹앱 삽질기 / 카카오게임즈 mark.song…","html":"<p>Kakao FE meetup 에 다녀오고 글을 정리해둔지는 꽤 되었는데 이제서야 포스팅을 하게 되었다.\n그 때 얻었던 인사이트를 지금까지 적용해본게 있는지 되돌아 보고자 재정리 + 포스팅을 하기로 결심했다.</p>\n<p>얼른 생활적 거리두기도 끝나고 모든게 괜찮아져서 세미나를 다시 갈 수 있는 날이 오길. 글로 보는 것과 세미나에서 직접 듣고 질의응답에 참여하는건 정말 다른 것 같다. (글만으로도 충분하지만)</p>\n<h2 id=\"프렌즈타임-웹앱-삽질기--카카오게임즈-marksong송명현님\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A0%8C%EC%A6%88%ED%83%80%EC%9E%84-%EC%9B%B9%EC%95%B1-%EC%82%BD%EC%A7%88%EA%B8%B0--%EC%B9%B4%EC%B9%B4%EC%98%A4%EA%B2%8C%EC%9E%84%EC%A6%88-marksong%EC%86%A1%EB%AA%85%ED%98%84%EB%8B%98\" aria-label=\"프렌즈타임 웹앱 삽질기  카카오게임즈 marksong송명현님 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프렌즈타임 웹앱 삽질기 / 카카오게임즈 mark.song(송명현님)</h2>\n<hr>\n<p><a href=\"https://www.slideshare.net/ifkakao/kakao-fe-meetup-games\">프렌즈타임 웹앱 삽질기</a></p>\n<p><strong>소개</strong></p>\n<p>남녀노소 누구나 살면서 한번은 해봤을 놀이 ‘가위바위보’, 전국민이 실시간 대결을 펼친다! 는 간단한 아이디어로 시작된 서비스 ‘프렌즈타임’. 카카오톡 안의 웹앱으로 ‘프렌즈타임’을 개발하면서 경험한 크고 작은 이야기들을 공유합니다.</p>\n<p><strong>내용</strong></p>\n<p>프렌즈타임이란 게임은 정해진 시간에 실시간으로 모여서 우승자가 결정 될 때 까지 가위바위보를 진행하여 우승자는 상금을 얻는다. </p>\n<p><strong>프렌즈타임 처음</strong></p>\n<ul>\n<li>\n<p>Native App? OR  웹앱? 을 고민하던 중 아래와 같은 고민사항들로 인해 웹앱으로 가게 되었다고 합니다.</p>\n<ul>\n<li>카카오톡 게임별 탭 담당 ( IOS / AOS ) 만 있었음</li>\n<li>카카오톡 Native app 업데이트 주기는 약 한달의 한번이지만 프렌즈타임 서비스는 <strong>매주</strong> 진행되어야 함</li>\n</ul>\n</li>\n<li>\n<p>게임별 브라우저</p>\n<ul>\n<li>스낵게임을 위해 만들어진 웹 브라우저, 카카오톡을 통해서만 실행시킬 수 있음</li>\n<li>특정 인터페이스를 통해 디바이스 API 사용가능</li>\n<li>카카오톡만 깔려있으면 ok</li>\n</ul>\n</li>\n<li>\n<p>웹앱으로 가기</p>\n<ul>\n<li>전문 웹 개발자가 없던 팀 내 상황</li>\n<li>Vue.js -> 매력적인 낮은 러닝커브라는 장점</li>\n</ul>\n</li>\n<li>\n<p>웹앱의 trade-off</p>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>별도 설치 X</li>\n<li>한벌의 코드로 IOS / AOS 모두 지원 가능</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>네트워크 환경에 의존적임</li>\n<li>네이티브 앱에 비해 떨어지는 퍼포먼스</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>SPA</p>\n<ul>\n<li>\n<p>사용자 경험</p>\n<ul>\n<li>단일 화면으로 구성되어 뷰 사이를 자연스럽게 이동</li>\n<li>한순간에 트래픽이 많이 몰려도 비교적 부하가 적다 ( MPA 구조는 안됨 )</li>\n<li>초기에 받아오는 정적자원의 최적화가 필요</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Webpack ( Bundler )</p>\n<ul>\n<li>초기에 받아오는 정적자원의 최적화 : Code Splitting, Lazy Loading</li>\n<li>Minify, Tree Shaking</li>\n</ul>\n</li>\n<li>\n<p>Dynamic import</p>\n<ul>\n<li>component: () => import(link).then( n => n.default)</li>\n</ul>\n</li>\n<li>\n<p>Webpack 번들 분석</p>\n<ul>\n<li>\n<p>webpack-bundle-analyzer</p>\n<ul>\n<li>moment (timezone을 위해 사용했는데 너무 많아서 결국 삭제)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>웹앱에서의 이미지 처리</p>\n<ul>\n<li>전체 asset에서 가장 많은 부분을 차지하는 이미지</li>\n<li>일반적인 코드와 비교하여 훨씬 큰 용량</li>\n<li>\n<p>시작시 꼭 필요한 이미지가 아니라면 일반적으로 비동기로 불러온다.</p>\n<ul>\n<li>필요할 때 이미지를 불러오는 Lazy Loading</li>\n<li>즉시 보이지 않아도 되는 이미지가 대상</li>\n<li>보통 Placeholder / indicator 를 통해 시간을 보여줌</li>\n</ul>\n</li>\n<li>다음화면에 필요한 이미지들을 Preload 한다.</li>\n</ul>\n</li>\n<li>Image Preload</li>\n<li>\n<p>자연스러운 애니메이션 처리</p>\n<ul>\n<li>\n<p>AS-IS</p>\n<ul>\n<li>긴 스프라이트 시트를 이용한 애니메이션</li>\n<li>다른 이미지보다 용량이 크다</li>\n<li>어디까지나 비동기, 100퍼센트 보장 안됨</li>\n</ul>\n</li>\n<li>\n<p>TO-BE</p>\n<ul>\n<li>만약 이미지가 완전히 로드되지 않았다면 정지된 이미지를 보여주자</li>\n<li>(애니메이션의 첫 프레임을 보여줌)</li>\n<li>AnimationLoader &#x3C;-> ImageLoader ( Promise , resolve (완료 시)</li>\n</ul>\n</li>\n<li>웹 환경에서 어쩔 수 없는 부분, UX 를 챙기기</li>\n</ul>\n</li>\n<li>\n<p>좋은 tool 추천</p>\n<ul>\n<li>ESLint -> airbnb 베이스의 일부 커스터마이징 된 툴을 사용 중</li>\n<li>git pre-commit 훅을 이용해 룰을 통과하지 못하면 커밋을 하지 못하도록 강제</li>\n<li>\n<p>Sentry</p>\n<ul>\n<li>클라이언트의 에러도 기록해주는 에러 트래킹 툴</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>그 외</p>\n<ul>\n<li>GA 로 사용자패턴 분석해보기</li>\n<li>etc.</li>\n</ul>\n</li>\n<li>\n<p>그래도 웹앱?</p>\n<ul>\n<li>서비스가 커질수록 중요해지는 최적화 이슈</li>\n<li>얼마나 잘 비동기로 처리하느냐 문제</li>\n<li>\n<p>퍼포먼스보다는 웹앱에서 대응하기 힘든 문제를 먼저 고려</p>\n<ul>\n<li>앱스토어 사용 불가 (검색, 노출 문제)</li>\n<li>Device API 사용 문제</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"카카오커머스를-지탱하는-angular--카카오커머스-johnnym김민형님\" style=\"position:relative;\"><a href=\"#%EC%B9%B4%EC%B9%B4%EC%98%A4%EC%BB%A4%EB%A8%B8%EC%8A%A4%EB%A5%BC-%EC%A7%80%ED%83%B1%ED%95%98%EB%8A%94-angular--%EC%B9%B4%EC%B9%B4%EC%98%A4%EC%BB%A4%EB%A8%B8%EC%8A%A4-johnnym%EA%B9%80%EB%AF%BC%ED%98%95%EB%8B%98\" aria-label=\"카카오커머스를 지탱하는 angular  카카오커머스 johnnym김민형님 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>카카오커머스를 지탱하는 Angular / 카카오커머스 johnny.m(김민형님)</h2>\n<hr>\n<p><a href=\"https://www.slideshare.net/ifkakao/kakao-fe-meetup-commerce-angular-198261414\">카카오커머스를 지탱하는 Angular</a></p>\n<p><strong>소개</strong></p>\n<p>3년간 카카오커머스에서 Angular v2부터 사용하며 겪었던 경험들을 토대로 프레임웍의 특징과 장단점, 그리고 서비스를 안정적으로 운영하기 위한 Best Practice들을 살펴 보고자 합니다.</p>\n<p><strong>내용</strong></p>\n<ol>\n<li>카카오 커머스는 왜 Angular 를 사용하고 있나</li>\n<li>Angular 를 어떻게 사용하고 있는지</li>\n</ol>\n<p><strong>카카오 커머스는 왜 Angular 를 사용하고 있나</strong></p>\n<ul>\n<li>카카오 커머스는 관리자 ( 판매자, 계정, 검수 ) / 모바일 웹을 React, Vanila -> Angular 로 전환하고 있음</li>\n<li>전환할 때, 한번에 전환하는 것이 아닌 점진적으로 전환 (프록시를 통해서 이전 프로젝트/ 신규 프로젝트를 분기별로 호출 함)</li>\n<li>\n<p>복잡한 폼 쉽게 개발하기</p>\n<ul>\n<li>3개의 class 를 제공한다. FormGroup / FormArray / FormControl</li>\n<li>directive 를 통해 dom element 와 연결시킬 수 있어서 단방향으로 값을 변경하고 변경 받을 수 있다.</li>\n<li>form 은 value 외에 여러가지 상태를 제공한다.</li>\n<li>\n<p>Validators (유효성 검사 함수)</p>\n<ul>\n<li>인스턴스의 값이 변할 때마다 함수를 실행한다.</li>\n<li>null을 반환하면 통과 / 에러 이유를 같이 return 하면 에러, return 된 값은 에러의 메세지가 됨</li>\n</ul>\n</li>\n<li>오류 템플릿, 복잡한 유효성 검사 필요 없어짐</li>\n</ul>\n</li>\n<li>\n<p>위의 내용 정리 :  복잡한 폼 쉽게 개발하기</p>\n<ul>\n<li><strong>단순한 클래스들을 조립</strong>해 사용</li>\n<li><strong>중복되는 폼 분리</strong> 가능</li>\n<li>최대한 서버 응답 오류 활용 (어차피 보안 이슈로 필요한 부분)</li>\n<li>대부분의 페이지에서 오류 템플릿은 작성할 필요 없음</li>\n<li>입력 중 피드백이 필요한 부분만 별도 API 협의해 사용</li>\n</ul>\n</li>\n<li>\n<p>모든것이 퍼스트파티</p>\n<ul>\n<li>\n<p>코드의 파편화가 없다.</p>\n<ul>\n<li>퍼스트 파티 패키지만으로 서비스 개발 가능</li>\n<li>개발 패턴이 비슷해서 어렵지않다</li>\n</ul>\n</li>\n<li>\n<p>프레임웍 자체의 업데이트, 의존성 관리가 편하다</p>\n<ul>\n<li>모두 ng update 한방에 안전하게 업데이트</li>\n<li>update.angular.io 에서 새 기능. Breaking changes 를 한눈에 볼 수 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>개발이 편리하다</p>\n<ul>\n<li>\n<p>자동 change detection</p>\n<ul>\n<li>\n<p>컴포넌트의 프로퍼티 변경을 자동으로 dom에 업데이트</p>\n<ul>\n<li>zone.js -> onkeyFetching 을 해줌</li>\n</ul>\n</li>\n<li>\n<p>간단히 성능 최적화 가능</p>\n<ul>\n<li>라우팅 단위로 번들링</li>\n<li>동적으로 Lazy Loading 을 해주고 Prefetching (when Idle) -> 퍼스트파티로만 가능</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>간편한 서비스 최적화</p>\n<ul>\n<li>code splitting, lazy loading 등 공식 가이드만 사용하면 잘 됨</li>\n</ul>\n</li>\n<li>http interceptor (공통 오류 간편 처리)</li>\n<li>rxjs 로 비동기 이벤트를 간편하게 할 수 있음</li>\n</ul>\n</li>\n<li>\n<p>강력한 CLI 도구</p>\n<ul>\n<li>파일 생성 및 생성된 클래스 import 문 추가, 기존 코드에 자연스럽게 추가</li>\n<li>필요하면 의존 패키지 추가까지 자동으로 해줌 (PWA 환경 등)</li>\n<li>\n<p>@angular/schematics 사용하면 우리도 만들 수 있음</p>\n<ul>\n<li>반복되는 비즈니스 로직이 작성 되어있는 컴포넌트 만들기</li>\n<li>Angular 모듈 트리를 읽어서 실제로 쓰는 컴포넌트의 프로퍼티 변경</li>\n<li>기타 등등..</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Http Interceptor</p>\n<ul>\n<li>앱 내 XHR의 요청 전, 응답 직후 시점에 처리 가능</li>\n<li>서버에서 공통적으로 특정 헤더 원할 때</li>\n<li>캐시 때문에 query로 타임스탬프 추가해야 할 때 </li>\n<li>\n<p>서비스 개발 전 공통 오류 코드를 정의하고 여기서 라우팅 및 추가 동작 구현</p>\n<ul>\n<li>axiom interceptor</li>\n<li>403 -> 로그인 페이지</li>\n<li>500 -> 일시적인 오류 페이지</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>rxjs 로 이벤트 처리도 쉽게</p>\n<ul>\n<li>rxjs/operator 를 사용하면 자유롭게 쓸 수 있음</li>\n</ul>\n</li>\n<li>\n<p>프레임웍의 주요 업데이트</p>\n<ul>\n<li>V9 : Soon</li>\n<li>\n<p>V8 : Differential Loading</p>\n<ul>\n<li>Ivy Renderer</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>V8 -> Differential Loading\n- Angular CLI 가 브라우저리스트 파일을 읽어서 앱의 지원 범위 파악\n- tsconfig.json 의 컴파일 타겟은 ES2015\n- 번들 사이즈가 7 ~ 20 % 감소</p>\n<ul>\n<li>\n<p>카카오 커머스는 어떻게 일하고 있는지</p>\n<ul>\n<li>별도의 패키지로 만들어 관리 (중복되는 코드)</li>\n<li>패키지는 코드리뷰와 테스트 거쳐서 사내 private npm에 등록해서 npm install 명령으로 install 해서 사용함</li>\n<li>nodejs 로 push, PR 등 알림 어플리케이션 만들어 사용</li>\n</ul>\n</li>\n<li>\n<p>Angular를 사용할 때 이점 정리</p>\n<ul>\n<li>개발할때 신경쓸 것이 적다 (+간편한 최적화)</li>\n<li>폼 컴포넌트 개발 할 때 정말 편리</li>\n<li>퍼스트파티 패키지라 안정성이 좋고 업데이트도 부담없음</li>\n<li>모든 프로젝트를 Angular 기반으로 개발할 예정</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"바닥부터-시작하는-vue-테스트와-리팩토링--카카오-lumikim김아름님\" style=\"position:relative;\"><a href=\"#%EB%B0%94%EB%8B%A5%EB%B6%80%ED%84%B0-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-vue-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%99%80-%EB%A6%AC%ED%8C%A9%ED%86%A0%EB%A7%81--%EC%B9%B4%EC%B9%B4%EC%98%A4-lumikim%EA%B9%80%EC%95%84%EB%A6%84%EB%8B%98\" aria-label=\"바닥부터 시작하는 vue 테스트와 리팩토링  카카오 lumikim김아름님 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>바닥부터 시작하는 Vue 테스트와 리팩토링 / 카카오 lumi.kim(김아름님)</h2>\n<hr>\n<p><a href=\"https://www.slideshare.net/ifkakao/kakao-fe-meetup-vue-test-re\">바닥부터 시작하는 Vue 테스트와 리팩토링</a></p>\n<p><strong>소개</strong></p>\n<p>테스트 코드가 한 줄도 없던 Vue 프로젝트의 코드를 리팩토링하기 위해 테스트 코드를 작성한 경험을 공유합니다. 어떻게 시작하게 되었는지부터 과정을 통해 깨달은 것들을 소개하고 생각을 나누어보고자 합니다.</p>\n<p><strong>내용</strong></p>\n<ol>\n<li>Vue 컴포넌트 테스트 작성방법</li>\n<li>테스트를 작성하면서 했던 생각들</li>\n<li>FE 파트 안에서 관련 주제로 나눈 대화</li>\n<li>Kakao for Business : 카카오 비즈니스 사용자를 위한 통합 비즈니스 플랫폼</li>\n<li>Nuxt 기반의 Vue 컴포넌트로 개발된 프로젝트</li>\n<li>\n<p>기존에 구현되어 있었던 덩치가 큰 코드들</p>\n<ul>\n<li>기존 구조를 유지하면서 기능 추가를 하다보니 수정하는 비용이 추가됨</li>\n<li>더 수정되기 전에 리팩토링 하고싶다.</li>\n<li>QA를 거치고 운영되는 코드는 귀한 코드이기 때문에 테스트코드 없이 리팩토링 어떻게 보장할것인지? 테스트 코드와 함께 리팩토링 하는게 좋을 것</li>\n<li>기능 추가와 함께 리팩토링 하지 말 것</li>\n</ul>\n</li>\n<li>\n<p>운영중인 코드를 리팩토링 할 때</p>\n<ul>\n<li>테스트코드가 안정성을 도와주고, 가시적으로 볼 수 있어서 좋음</li>\n<li>운영업무 외의 도전 과제 ( 프로젝트 코드를 대상, 컴포넌트 테스트 학습과 적용 )</li>\n</ul>\n</li>\n<li>환경구성</li>\n<li>pages 테스트 당할 파일 / mock  가짜 데이터 / specs 테스트 코드 작성 파일</li>\n<li>ava, Simon, @vue/test-utils를 사용함</li>\n<li>테스트 코드 작성</li>\n<li>시나리오 : 페이지 진입 시 (페이지 컴포넌트 생성) -> 아이디 정보가 없으면, 에러 모달을 보여준다.</li>\n<li>\n<p>given / when / then</p>\n<ul>\n<li>given </li>\n<li>\n<p>given</p>\n<ul>\n<li>mount 되기 전 로직 테스트</li>\n<li>stub -> created, mount 두 번 테스트를 하기 위해 stub 를 사용함 ( test double )</li>\n<li></li>\n</ul>\n</li>\n<li>컴포넌트 생성 조건 옵션 유틸 추가</li>\n</ul>\n</li>\n<li>테스트더블을 붙이는 시기에 따라, restore () 여부가 달랐음</li>\n<li>리팩토링 + 테스트 전략</li>\n<li>\n<p>VUe data 테스트</p>\n<ul>\n<li>\n<p>테스트 해야 할 뷰 data 종류</p>\n<ul>\n<li><template> 표현식 결과값</li>\n<li>props</li>\n<li>data</li>\n<li>computed</li>\n<li>(watch)</li>\n<li>(methods)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>템플릿에 표현식이 있을 때</p>\n<ul>\n<li>dom 에 접근할 수 있는 ref, class를 추가하고 렌더링된 결과물 확인</li>\n<li>템플릿 표현식을 제거하면, 치환된 computed 결과값을 테스트</li>\n</ul>\n</li>\n<li><a href=\"https://martinfowler.com/biki/PageObject\">https://martinfowler.com/biki/PageObject</a></li>\n<li>\n<p>리팩토링</p>\n<ul>\n<li>뷰를 관여하는 로직이 포함 되어있다면 제거를 하자. (V-if=“isDisabled &#x26;&#x26; ddd”)</li>\n<li>템플릿에서 로직을 분리 (computed, method 활용)</li>\n</ul>\n</li>\n<li>\n<p>테스트 전략</p>\n<ul>\n<li>dom에 접근해 render 된 결과물을 확인하기보다는</li>\n<li>뷰 data 값을 확인하자.</li>\n<li>뷰 data 템플릿 바인딩 여부는 snapshot, e2e에게 책임을</li>\n</ul>\n</li>\n<li>\n<p>snapshot 테스팅 동작 방식 </p>\n<ul>\n<li>실행시키면 결과물이 따로 저장이 된다.</li>\n</ul>\n</li>\n<li>\n<p>고찰</p>\n<ul>\n<li>E2E테스트 : 고비용</li>\n<li>\n<p>컴포넌트 테스트 + 스냅샷 테스트 : 저비용 (t.snapshot만 추가하면 끝)</p>\n<ul>\n<li>스냅샷으로 렌더링 결과값을 비교하므로 좀 더 안전한 테스트</li>\n</ul>\n</li>\n<li>그러나, 서비스의 특성마다 테스트 전략은 달라질 수 있다고 생각</li>\n</ul>\n</li>\n<li>\n<p>props</p>\n<ul>\n<li>인스턴스 생성 시 props 를 주입</li>\n</ul>\n</li>\n<li>\n<p>data, computed</p>\n<ul>\n<li>뷰 인스턴스 생성 후 조작</li>\n</ul>\n</li>\n<li>\n<p>watch , methods</p>\n<ul>\n<li>data 변화 확인</li>\n<li>method return 값 확인</li>\n</ul>\n</li>\n<li>\n<p>컴포넌트 간 테스트</p>\n<ul>\n<li>\n<p>mount vs shallowMount</p>\n<ul>\n<li>자식 컴포넌트를 가지고 있는 부모 컴포넌트를 test 한다면 부모 컴포넌트를 shallowMount를 한다면 자식 객체를 stub 으로 만들어줘서 빈 객체 독립적으로 테스트 가능</li>\n<li>\n<p>부모와 자식의 관계를 테스트 하고싶다면</p>\n<ul>\n<li>부모 컴포넌트에서 .find 를 해서 자식 컴포넌트를 찾아서 props 를 줄 수 있음</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>좋았던 점</strong></p>\n<ul>\n<li>테스트 역할의 이해 : 리팩토링 안정성, 가시성</li>\n<li>컴포넌트 테스트 방법과 노하우</li>\n<li>테스트가 쉬운 컴포넌트 고민 -> 근거있는 리팩토링 -> 코드 일관성</li>\n<li>업무가 소강상태일 때 할 수 있는 일</li>\n<li>운영 외의 업무로 성장하는 느낌</li>\n<li>피드백에 대한 갈증 해소</li>\n</ul>\n<p><strong>아쉬웠던 점</strong></p>\n<ul>\n<li>진행상황에 대한 업무 가시화 ( 목록, 일정 )를 잘 하지 못함.</li>\n<li>기존 코드를 망가뜨리지 않으면서 테스트와 리팩토링을 잘 병행 하는 방법</li>\n<li>컴포넌트와 협력하는 외부객체에 대한 테스트 ( store )</li>\n<li>테스트코드의 유지보수 경험</li>\n<li>더 복잡한 케이스의 테스트</li>\n</ul>","frontmatter":{"title":"Kakao FE(Front end) meetup, 1st 후기","date":"May 05, 2020"}}},"pageContext":{"slug":"/conference/2020-05-05-Kakao-meetup/","previous":{"fields":{"slug":"/web/2018-07-30-Kotlin-Serialize/"},"frontmatter":{"title":"특정 데이터가 Serialize 되지 않을 때","category":"web","draft":false}},"next":{"fields":{"slug":"/vue/2020-05-13-Mirage-vue-app/"},"frontmatter":{"title":"API Mocking Library - Mirage 설정하기 (Vue.js)","category":"vue","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}