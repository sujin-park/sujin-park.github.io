{"componentChunkName":"component---src-templates-blog-post-js","path":"/javascript/2020-07-14-Non-blocking-javascript2/","result":{"data":{"site":{"siteMetadata":{"title":"Archived by Sujin","author":"sujin-park","siteUrl":"https://sujin-park.github.io","comment":{"disqusShortName":"","utterances":"sujin-park/sujin-park.github.io"},"sponsor":{"buyMeACoffeeId":""}}},"markdownRemark":{"id":"a195b082-ef5d-5159-a017-8596c14a74d5","excerpt":"이전보다 개인적으로 공부 할 시간이 남게 되어서 이전에 스터디 참여했던 Code spitz 85 Non blocking Javascript 를 복습하려고 한다.\n당시에 회사 다니면서 어렵게 참여해서 들었던 시간을 헛되게 넘기고 싶지 않아서 이번에 복습을 제대로 해봐야겠다. 2강부터 다시 복습하게 된 이유는…가장 열심히 들었고 이 수업 중 가장 많이 이해했던 강의다. 이번엔 꼭 제대로 공부해봐야겠다. Concurrency (동시성) 마치 동시에 하는 것처럼 짧고 빠르게 하는 것 하나의 task…","html":"<p>이전보다 개인적으로 공부 할 시간이 남게 되어서 이전에 스터디 참여했던 Code spitz 85 [Non blocking Javascript] 를 복습하려고 한다.\n당시에 회사 다니면서 어렵게 참여해서 들었던 시간을 헛되게 넘기고 싶지 않아서 이번에 복습을 제대로 해봐야겠다. 2강부터 다시 복습하게 된 이유는…가장 열심히 들었고 이 수업 중 가장 많이 이해했던 강의다. 이번엔 꼭 제대로 공부해봐야겠다.</p>\n<h3 id=\"concurrency-동시성\" style=\"position:relative;\"><a href=\"#concurrency-%EB%8F%99%EC%8B%9C%EC%84%B1\" aria-label=\"concurrency 동시성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Concurrency (동시성)</h3>\n<hr>\n<ul>\n<li>마치 동시에 하는 것처럼 짧고 빠르게 하는 것</li>\n<li>하나의 task 만 하나의 메모리를 접근 할 수 있다.</li>\n<li>task A, B 가 둘다 접근해야 한다면 시점을 다르게 해서 접근한다.</li>\n</ul>\n<h3 id=\"parallelism-병행성-병렬성\" style=\"position:relative;\"><a href=\"#parallelism-%EB%B3%91%ED%96%89%EC%84%B1-%EB%B3%91%EB%A0%AC%EC%84%B1\" aria-label=\"parallelism 병행성 병렬성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parallelism (병행성, 병렬성)</h3>\n<hr>\n<ul>\n<li>동시에 task 를 진행하는 것</li>\n<li>task 에 할당되는 각각의 worker가 각자 메모리를 쓰고 있고 각자 진행됨</li>\n<li>물리적으로 2개의 프로세스가 존재해야 task 를 동시에 진행할 수 있음</li>\n<li>동시에 하나의 메모리를 공유하게 되면 문제가 생길 수 있음</li>\n<li>\n<p>하나의 task 가 메모리를 할당하고 있으면, 다른 task 는 좌절, 탈취, 대기를 할 수 있다.</p>\n<p>( ex. java는 Object 에 wait가 있어서 대기를 할 수 있음 )</p>\n</li>\n<li>Shared memory, Atomic 으로 인해 이러한 문제가 생긴다.</li>\n</ul>\n<h3 id=\"javascript-concurrency\" style=\"position:relative;\"><a href=\"#javascript-concurrency\" aria-label=\"javascript concurrency permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript Concurrency</h3>\n<hr>\n<p><strong>engine work (rendering…)</strong> </p>\n<ul>\n<li>자바스크립트 코드에 영향을 끼치는 것들 - 1 thread 를 사용</li>\n<li>자바스크립트 코드에 영향 X - multi thread 를 사용</li>\n</ul>\n<p>check queue ← calback queue ( network, timer, message, dom event : parallelism 으로 되어있음) </p>\n<p>run JS - 자바스크립트를 빠르게 실행이 될 수 있게 작성 해야 함 (engine work, check queue는 우리가 할 수 없음)</p>\n<ul>\n<li>브라우저는 싱글스레드라고 하는건 engine work, check queue, run JS 부분만 싱글스레드고 나머지는 멀티스레드로 task 를 병행으로 처리하고 있다.</li>\n<li>스레드 - 생산자를 한 명만 두고 있는 게 <strong>파이프패턴</strong></li>\n</ul>\n<h3 id=\"settimer\" style=\"position:relative;\"><a href=\"#settimer\" aria-label=\"settimer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>setTimer</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Item <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">{</span>\n\ttime<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 시간</span>\n\tblock<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 실행 될 함수</span>\n\t<span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">block<span class=\"token punctuation\">,</span> time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>block <span class=\"token operator\">=</span> block<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>time <span class=\"token operator\">=</span> time <span class=\"token operator\">+</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// performance.now() 브라우저가 시작 된 이후의 몇초가 지났는지</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> queue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 배열은 사실상 값만 저장하기때문에, 중복되지않은 객체를 저장하고 싶다면 Set을 사용ㅇ</span>\n\n<span class=\"token comment\">// check queue function</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">time</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\tqueue<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// ES6부터는 forEach 는 복사본을 돌리기 때문에 delete를 해도 무방함</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">.</span>time <span class=\"token operator\">></span> time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n\t\tqueue<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>\n\t\titem<span class=\"token punctuation\">.</span><span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">timeout</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">block<span class=\"token punctuation\">,</span> time</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Item</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span><span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>알아야 하는 것</strong></p>\n<ol>\n<li>event loop ?</li>\n<li>event loop 초기하거나 달성할 수 있는지 ?</li>\n</ol>\n<h3 id=\"non-blocking-for\" style=\"position:relative;\"><a href=\"#non-blocking-for\" aria-label=\"non blocking for permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Non Blocking For</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">working</span> <span class=\"token operator\">=</span><span class=\"token parameter\">_</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// ES6 화살표함수는 인자가 없으면 () 생략하고 _를 할 수 있음</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">working</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nbFor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">max<span class=\"token punctuation\">,</span> load<span class=\"token punctuation\">,</span> block</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// i count 를 max-1까지 돌리기</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">time</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">let</span> curr <span class=\"token operator\">=</span> load\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>curr<span class=\"token operator\">--</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 최대 100번만 돌 수 있고, max보다 i가 더 크면 아예 못돌게 작성</span>\n\t\t\t<span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ti<span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> max <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 100번만 돌고, engine 에게 다시 돌려줘서 engine work 를 할 수 있다. (제어권 돌려줌)</span>\n\t\t<span class=\"token comment\">// timeoout function 을 사용해서 requestAnimationFrame 을 숨ㄱㅁ</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">nbFor</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> working<span class=\"token punctuation\">)</span></code></pre></div>\n<p><strong>위 설명</strong></p>\n<ul>\n<li>\n<p>i 는 함수를 실행할 때, 0 으로 초기화 되며 함수를 실행하는 동안 상태가 보존된다.</p>\n<p>→ closer 패턴</p>\n</li>\n<li>함수의 캡슐화, 지연 실행을 적용한 함수</li>\n</ul>\n<h3 id=\"generator\" style=\"position:relative;\"><a href=\"#generator\" aria-label=\"generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Generator</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// 메모리를 할당하고 있지 않아도 무한으로 만들 수 있다.</span>\n<span class=\"token keyword\">const</span> infinity <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> <span class=\"token comment\">// *를 붙이면 suspend 라는 구간을 만든다.</span>\n\t<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">yield</span> i<span class=\"token operator\">++</span> <span class=\"token comment\">// yield 를 호출하면 suspend. yield 가 호출되면서 멈춤.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// iterator 바로 실행 </span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>infinity<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// iterator 의 객체로 next 호출 가능</span>\n<span class=\"token comment\">// next 를 호출할 때 마다 yield 에서 다시 호출되면서 resume</span></code></pre></div>\n<ol>\n<li>iterator, iterable, generator 공부하기</li>\n<li>suspend / resume</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gene</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> load<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> load\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 다른 서브 루틴을 만들지 않고, 하나의 루프로 작업</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curr<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\ti<span class=\"token operator\">++</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\tcurr <span class=\"token operator\">=</span> load\n\t\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">yield</span><span class=\"token comment\">// suspend 걸어서 외부에 제어를 위임한다.(반제어)**</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>→ 제어 구조를 가지고 있지만, yield (suspend 걸기) 하면 제어의 일부를 바깥으로 위임하여 하고싶은 일을 바깥에서 할 수 있다. (제어 역전의 일부)</p>\n<p>제어 문은 복사해서 써 올 수 밖에 없음. 재활용을 할 수가 없다.</p>\n<p>명령<strong>문 ( if, while, …)</strong> 으로 만들면 재활용을 하지 못하고 실행되면 사라짐. 그러므로 값으로 만들어야 함. (값은 메모리에 저장되어 있기 때문에)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nbFor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">max<span class=\"token punctuation\">,</span> load<span class=\"token punctuation\">,</span> block</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">gene</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> load<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">)</span> <span class=\"token comment\">// iterator : **value, done** 이 있는 object 를 return 함</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">f</span> <span class=\"token operator\">=</span><span class=\"token parameter\">_</span><span class=\"token operator\">=></span> iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>done <span class=\"token operator\">||</span> <span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n\t<span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//timeout 분리 성공</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">nbFor</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> working<span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"promise\" style=\"position:relative;\"><a href=\"#promise\" aria-label=\"promise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Promise</h3>\n<hr>\n<ul>\n<li>promise를 return 해보면, then 을 언제 할 것 인지를 제어할 수 있다.</li>\n<li>promise 와 generator 를 같이 사용하면 제어 역전이 가능하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">gene2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> load<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> curr <span class=\"token operator\">=</span> load\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">yield</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// Promise return</span>\n\t\t\t<span class=\"token keyword\">let</span> curr <span class=\"token operator\">=</span> load\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>curr<span class=\"token operator\">--</span> <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token function\">block</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\t\t\t\ti<span class=\"token operator\">++</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\tcoonsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">timeout</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// then 에 대한 통제권을 바깥에서 가지게 돔</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 제어권은 다 Promise 에 가있고, 아래 함수는 실행만 해주는 함수 (단순 실행)</span>\n<span class=\"token comment\">// Generator Co pattern</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nbFor</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">max<span class=\"token punctuation\">,</span> load<span class=\"token punctuation\">,</span> block</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> iterator <span class=\"token operator\">=</span> <span class=\"token function\">gene2</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span> load<span class=\"token punctuation\">,</span> block<span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">next</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">,</span> done<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> done <span class=\"token operator\">||</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// yield 해소 부분</span>\n\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Code spitz 85 [Non blocking Javascript] - 2강","date":"July 14, 2020"}}},"pageContext":{"slug":"/javascript/2020-07-14-Non-blocking-javascript2/","previous":{"fields":{"slug":"/javascript/2020-06-16-javascript-type-value/"},"frontmatter":{"title":"타입과 값","category":"javascript","draft":false}},"next":{"fields":{"slug":"/web/2020-07-23-CSS-Preprocessor-SASS/"},"frontmatter":{"title":"CSS 전처리기 (CSS Preprocessor) - SASS","category":"web","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}